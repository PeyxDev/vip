#!/bin/bash

# Color definitions
green="\e[38;5;82m"
red="\e[38;5;196m"
neutral="\e[0m"
orange="\e[38;5;130m"
blue="\e[38;5;39m"
yellow="\e[38;5;226m"
purple="\e[38;5;141m"
bold_white="\e[1;37m"
pink="\e[38;5;205m"
reset="\e[0m"
gray="\e[38;5;245m"

# Function to print rainbow text
print_rainbow() {
    local text="$1"
    local length=${#text}
    local start_color=(0 5 0)
    local mid_color=(0 200 0)
    local end_color=(0 5 0)
    for ((i = 0; i < length; i++)); do
        local progress=$((i * 100 / (length - 1)))
        if [ $progress -lt 50 ]; then
            local factor=$((progress * 2))
            r=$(((start_color[0] * (100 - factor) + mid_color[0] * factor) / 100))
            g=$(((start_color[1] * (100 - factor) + mid_color[1] * factor) / 100))
            b=$(((start_color[2] * (100 - factor) + mid_color[2] * factor) / 100))
        else
            local factor=$(((progress - 50) * 2))
            r=$(((mid_color[0] * (100 - factor) + end_color[0] * factor) / 100))
            g=$(((mid_color[1] * (100 - factor) + end_color[1] * factor) / 100))
            b=$(((mid_color[2] * (100 - factor) + end_color[2] * factor) / 100))
        fi
        printf "\e[38;2;%d;%d;%dm%s" "$r" "$g" "$b" "${text:$i:1}"
    done
    echo -e "$reset"
}

# Error handling function
handle_error() {
    echo -e "${red}Error: $1${neutral}"
    exit 1
}

# Check and install dependencies
check_dependencies() {
    local deps=("curl" "wget" "sudo" "unzip" "7z")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo -e "${yellow}Installing $dep...${neutral}"
            apt-get install -y "$dep" || handle_error "Failed to install $dep"
        fi
    done
}

# Create required directories and set permissions
setup_directories() {
    local directories=(
        /etc/xray
        /etc/vmess
        /etc/vless
        /etc/trojan
        /etc/shadowsocks
        /usr/bin/xray
        /var/log/xray
        /var/www/html
        /etc/haproxy
        /etc/xray/vmess
        /etc/xray/vless
        /etc/xray/trojan
        /etc/xray/shadowsocks
        /etc/xray/ssh
    )

    for dir in "${directories[@]}"; do
        [ ! -d "$dir" ] && mkdir -p "$dir"
        chmod 755 "$dir"
    done
}

# Setup files with proper permissions
setup_files() {
    local files=(
        /etc/xray/domain
        /var/log/xray/access.log
        /var/log/xray/error.log
        /etc/xray/vmess/.vmess.db
        /etc/xray/vless/.vless.db
        /etc/xray/trojan/.trojan.db
        /etc/xray/shadowsocks/.shadowsocks.db
        /etc/xray/ssh/.ssh.db
        /etc/ssh/.ssh.db
    )

    for file in "${files[@]}"; do
        [ ! -f "$file" ] && touch "$file"
        chmod 644 "$file"
    done
}

# Domain validation
validate_domain() {
    local domain="$1"
    if [ -z "$domain" ]; then
        handle_error "Domain cannot be empty"
    fi
    
    # Basic domain format validation
    if ! [[ "$domain" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        handle_error "Invalid domain format: $domain"
    fi
    
    # Check DNS resolution
    if ! host "$domain" &> /dev/null; then
        echo -e "${yellow}Warning: Domain $domain does not resolve to any IP${neutral}"
    fi
}

# System information
get_system_info() {
    timezone="Asia/Jakarta"
    city=$(curl -s --connect-timeout 5 ipinfo.io/city || echo "Unknown")
    isp=$(curl -s --connect-timeout 5 ipinfo.io/org | cut -d " " -f 2-10 || echo "Unknown")
    domain=$(cat /etc/xray/domain 2>/dev/null || echo "")
    ip=$(curl -s --connect-timeout 5 ipinfo.io/ip || echo "Unknown")
    os_id=$(grep -w ID /etc/os-release | head -n1 | sed 's/ID=//g' | sed 's/"//g')
    os_version=$(grep -w VERSION_ID /etc/os-release | head -n1 | sed 's/VERSION_ID=//g' | sed 's/"//g')
    
    echo "OS: $os_id, Version: $os_version"
}

# Package installation with better error handling
install_packages() {
    local packages=(
        libnss3-dev liblzo2-dev libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev
        libcap-ng-utils libselinux1-dev flex bison make libnss3-tools libevent-dev bc
        rsyslog dos2unix zlib1g-dev libssl-dev libsqlite3-dev sed dirmngr libxml-parser-perl build-essential
        gcc g++ htop lsof tar wget curl ruby zip unzip p7zip-full libc6 util-linux
        ca-certificates iptables iptables-persistent netfilter-persistent
        net-tools openssl gnupg gnupg2 lsb-release shc cmake git whois
        screen socat xz-utils apt-transport-https gnupg1 dnsutils cron bash-completion ntpdate chrony jq
        tmux python3 python3-pip lsb-release gawk
        libncursesw5-dev libgdbm-dev tk-dev libffi-dev libbz2-dev checkinstall
        openvpn easy-rsa dropbear
    )

    echo -e "${blue}Updating package list...${neutral}"
    apt-get update -y || echo -e "${yellow}Warning: Failed to update package list${neutral}"

    for package in "${packages[@]}"; do
        if ! dpkg -s "$package" >/dev/null 2>&1; then
            echo -e "${green}Installing $package...${neutral}"
            if ! apt-get install -y "$package"; then
                echo -e "${yellow}Warning: Failed to install $package${neutral}"
            fi
        else
            echo -e "${gray}$package is already installed${neutral}"
        fi
    done
}

# Download file with retry and validation
download_file() {
    local url="$1"
    local output="$2"
    local max_retries=3
    local retry_count=0
    
    while [ $retry_count -lt $max_retries ]; do
        if wget -q -O "$output" "$url"; then
            if [ -s "$output" ]; then
                echo -e "${green}Successfully downloaded $(basename "$output")${neutral}"
                return 0
            fi
        fi
        retry_count=$((retry_count + 1))
        echo -e "${yellow}Retry $retry_count/$max_retries for $(basename "$output")${neutral}"
        sleep 2
    done
    
    echo -e "${red}Failed to download $(basename "$output")${neutral}"
    return 1
}

# Setup Nginx based on OS
setup_nginx() {
    local os_id="$1"
    local nginx_key_url="https://nginx.org/keys/nginx_signing.key"
    
    case "$os_id" in
        "ubuntu")
            rm -f /etc/apt/sources.list.d/nginx.list
            curl -fsSL "$nginx_key_url" | gpg --dearmor > /usr/share/keyrings/nginx-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx" | tee /etc/apt/sources.list.d/nginx.list
            echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" | tee /etc/apt/preferences.d/99nginx
            ;;
        "debian")
            rm -f /etc/apt/sources.list.d/nginx.list
            curl -fsSL "$nginx_key_url" | gpg --dearmor > /usr/share/keyrings/nginx-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/debian $(lsb_release -cs) nginx" | tee /etc/apt/sources.list.d/nginx.list
            echo -e "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" | tee /etc/apt/preferences.d/99nginx
            ;;
        *)
            handle_error "Unsupported OS: $os_id"
            ;;
    esac
    
    apt-get update -y
    apt-get install -y nginx || handle_error "Failed to install nginx"
    
    # Remove default config if exists
    [ -f /etc/nginx/conf.d/default.conf ] && rm /etc/nginx/conf.d/default.conf
}

# Setup HAProxy based on OS version
setup_haproxy() {
    local os_id="$1"
    local os_version="$2"
    
    case "$os_id-$os_version" in
        "ubuntu-18.04") add-apt-repository -y ppa:vbernat/haproxy-2.6 ;;
        "ubuntu-20.04") add-apt-repository -y ppa:vbernat/haproxy-2.9 ;;
        "ubuntu-22.04"|"ubuntu-24.04") add-apt-repository -y ppa:vbernat/haproxy-3.0 ;;
        "debian-10")
            curl -fsSL https://haproxy.debian.net/bernat.debian.org.gpg | gpg --dearmor > /usr/share/keyrings/haproxy.debian.net.gpg
            echo "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.gpg] http://haproxy.debian.net buster-backports-2.6 main" > /etc/apt/sources.list.d/haproxy.list
            ;;
        "debian-11")
            curl -fsSL https://haproxy.debian.net/bernat.debian.org.gpg | gpg --dearmor > /usr/share/keyrings/haproxy.debian.net.gpg
            echo "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.gpg] http://haproxy.debian.net bullseye-backports-3.0 main" > /etc/apt/sources.list.d/haproxy.list
            ;;
        "debian-12")
            curl -fsSL https://haproxy.debian.net/bernat.debian.org.gpg | gpg --dearmor > /usr/share/keyrings/haproxy.debian.net.gpg
            echo "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.gpg] http://haproxy.debian.net bookworm-backports-3.0 main" > /etc/apt/sources.list.d/haproxy.list
            ;;
        *) handle_error "Unsupported OS version: $os_id $os_version" ;;
    esac
    
    apt-get update -y
    apt-get install -y haproxy || handle_error "Failed to install haproxy"
}

# Loading bar animation
loading_bar() {
    local total=$1
    local current=0
    local width=50
    
    while [ "$current" -le "$total" ]; do
        local filled_count=$((current * width / total))
        local empty_count=$((width - filled_count))
        local bar=$(printf "%${filled_count}s" | tr ' ' "▰")
        bar+=$(printf "%${empty_count}s" | tr ' ' "▱")
        printf "\r[${bar}] %d%%" $((current * 100 / total))
        sleep 0.1
        ((current++))
    done
    printf "\n"
}

# Setup menu system
setup_menu() {
    echo "Memulai proses instalasi menu, mohon tunggu..."
    mkdir -p /etc/menu
    cd /etc/menu

    local url="https://github.com/PeyxDev/vip/project/project.zip"
    
    # Download with progress indication
    echo -e "${blue}Downloading menu system...${neutral}"
    if wget -O menu.zip "$url" 2>&1 | grep -q "200 OK"; then
        loading_bar 100
        # Extract with password (if required)
        if command -v 7z >/dev/null 2>&1; then
            7z e -pPeyx@23 menu.zip >/dev/null 2>&1 || echo -e "${yellow}Extraction may have failed${neutral}"
        else
            unzip -P Peyx@23 menu.zip >/dev/null 2>&1 || echo -e "${yellow}Extraction may have failed${neutral}"
        fi
        
        chmod +x * >/dev/null 2>&1
        mv * /usr/bin >/dev/null 2>&1
        echo -e "${green}Menu system installed successfully${neutral}"
    else
        echo -e "${yellow}Failed to download menu system${neutral}"
    fi
    
    # Cleanup
    rm -rf /etc/menu /tmp/menu.zip >/dev/null 2>&1
}

# Setup Xray
setup_xray() {
    if ! command -v xray >/dev/null 2>&1; then
        echo -e "${blue}Installing Xray...${neutral}"
        bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version 1.8.7
    else
        echo -e "${green}Xray is already installed${neutral}"
    fi
}

# Setup SSL certificates
setup_ssl() {
    local domain="$1"
    
    if [ ! -d "/root/.acme.sh" ]; then
        mkdir -p /root/.acme.sh
    fi
    
    # Stop services temporarily
    systemctl stop haproxy nginx 2>/dev/null
    
    # Install acme.sh if not exists
    if [ ! -f "/root/.acme.sh/acme.sh" ]; then
        curl -fsSL https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
        chmod +x /root/.acme.sh/acme.sh
    fi
    
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    
    # Issue certificate
    if /root/.acme.sh/acme.sh --issue -d "$domain" --standalone -k ec-256; then
        /root/.acme.sh/acme.sh --installcert -d "$domain" \
            --fullchainpath /etc/xray/xray.crt \
            --keypath /etc/xray/xray.key --ecc
        
        # Combine for HAProxy
        cat /etc/xray/xray.crt /etc/xray/xray.key > /etc/haproxy/yha.pem
        
        # Set proper permissions
        chown www-data:www-data /etc/xray/xray.key /etc/xray/xray.crt
        chmod 644 /etc/xray/xray.key /etc/xray/xray.crt
        
        echo -e "${green}SSL certificates setup successfully${neutral}"
    else
        echo -e "${red}Failed to issue SSL certificate${neutral}"
    fi
}

# Setup swap
setup_swap() {
    local swap_file="/swapfile"
    local swap_size="2G" # Reduced from 5G to 2G for better compatibility
    
    if [ ! -f "$swap_file" ]; then
        echo -e "${blue}Setting up swap file...${neutral}"
        # Use dd instead of fallocate for better compatibility
        dd if=/dev/zero of="$swap_file" bs=1M count=2048 status=progress
        chmod 600 "$swap_file"
        mkswap "$swap_file"
        swapon "$swap_file"
        
        # Add to fstab if not already present
        if ! grep -q "$swap_file" /etc/fstab; then
            echo "$swap_file none swap sw 0 0" >> /etc/fstab
        fi
        
        echo -e "${green}Swap file created successfully${neutral}"
    else
        echo -e "${yellow}Swap file already exists${neutral}"
    fi
}

# Main installation function
main_installation() {
    clear
    
    # Check root privileges
    if [ "$EUID" -ne 0 ]; then
        handle_error "This script must be run as root"
    fi
    
    # Display banner
    echo -e "${blue}    ┌───────────────────────────────────────────────┐${neutral}"
    echo -e "${blue}    │                                               │${neutral}"
    echo -e "${blue}    │   ${green}┌─┐┬ ┬┌┬┐┌─┐┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┬  ┬┌┬┐┌─┐${neutral}"
    echo -e "${blue}    │   ${green}├─┤│ │ │ │ │└─┐│  ├┬┘│├─┘ │   │  │ │ ├┤ ${neutral}"
    echo -e "${blue}    │   ${green}┴ ┴└─┘ ┴ └─┘└─┘└─┘┴└─┴┴   ┴   ┴─┘┴ ┴ └─┘${neutral}"
    echo -e "${blue}    │   ${yellow}Copyright${reset} (C)${gray} https://t.me/frel01   ${neutral}"
    echo -e "${blue}    │                                               │${neutral}"
    echo -e "${blue}    └───────────────────────────────────────────────┘${neutral}"
    echo -e "${blue}    ────────────────────────────────────────────────${neutral}"
    
    # Get domain
    if [ -z "$1" ]; then
        echo -e "${yellow}Masukkan domain Anda untuk memulai instalasi:${neutral}"
        read -p "  Enter your domain: " domain
    else
        domain="$1"
    fi
    
    validate_domain "$domain"
    echo "$domain" > /etc/xray/domain
    
    # Initial setup
    check_dependencies
    setup_directories
    setup_files
    get_system_info
    
    # Install packages
    echo -e "${blue}Installing system packages...${neutral}"
    install_packages
    
    # Setup services
    setup_nginx "$os_id"
    setup_haproxy "$os_id" "$os_version"
    
    # Download configuration files
    echo -e "${blue}Downloading configuration files...${neutral}"
    
    # Define URLs
    declare -A urls=(
        ["haproxy.cfg"]="https://raw.githubusercontent.com/PeyxDev/vip/main/fooder/Haproxy/haproxy.cfg"
        ["xray.conf"]="https://raw.githubusercontent.com/PeyxDev/vip/main/fooder/nginx/xray.conf"
        ["vmess.json"]="https://raw.githubusercontent.com/PeyxDev/vip/main/Xray/vmess/config.json"
        ["vless.json"]="https://raw.githubusercontent.com/PeyxDev/vip/main/Xray/vless/config.json"
        ["trojan.json"]="https://raw.githubusercontent.com/PeyxDev/vip/main/Xray/trojan/config.json"
        ["shadowsocks.json"]="https://raw.githubusercontent.com/PeyxDev/vip/main/Xray/shadowsocks/config.json"
        ["nginx.conf"]="https://raw.githubusercontent.com/PeyxDev/vip/main/fooder/nginx/nginx.conf"
        ["gotop"]="https://raw.githubusercontent.com/PeyxDev/vip/main/Xray/gotop"
        ["udp-custom"]="https://raw.githubusercontent.com/PeyxDev/vip/main/fooder/udp/udp-custom-linux-amd64"
        ["badvpn"]="https://raw.githubusercontent.com/PeyxDev/vip/main/BadVPN-UDPWG/badvpn"
    )
    
    # Download files
    download_file "${urls[haproxy.cfg]}" "/etc/haproxy/haproxy.cfg"
    download_file "${urls[xray.conf]}" "/etc/nginx/conf.d/xray.conf"
    download_file "${urls[vmess.json]}" "/etc/xray/vmess/config.json"
    download_file "${urls[vless.json]}" "/etc/xray/vless/config.json"
    download_file "${urls[trojan.json]}" "/etc/xray/trojan/config.json"
    download_file "${urls[shadowsocks.json]}" "/etc/xray/shadowsocks/config.json"
    download_file "${urls[nginx.conf]}" "/etc/nginx/nginx.conf"
    download_file "${urls[gotop]}" "/usr/bin/gotop"
    download_file "${urls[udp-custom]}" "/usr/bin/udp"
    download_file "${urls[badvpn]}" "/usr/bin/badvpn"
    
    # Set executable permissions
    chmod +x /usr/bin/gotop /usr/bin/udp /usr/bin/badvpn
    chmod 644 /etc/nginx/nginx.conf
    
    # Remove Apache if exists
    if dpkg -s apache2 >/dev/null 2>&1; then
        apt-get remove --purge apache2 -y
        echo -e "${green}Apache removed${neutral}"
    fi
    
    # Setup menu system
    setup_menu
    
    # Setup Xray
    setup_xray
    
    # Setup SSL
    setup_ssl "$domain"
    
    # Setup swap
    setup_swap
    
    # Configure services
    echo -e "${blue}Configuring services...${neutral}"
    
    # Enable and start services
    services=(
        haproxy nginx ssh dropbear
    )
    
    for service in "${services[@]}"; do
        systemctl enable "$service" 2>/dev/null
        systemctl start "$service" 2>/dev/null
        echo -e "${green}Started $service${neutral}"
    done
    
    # Apply BBR
    echo -e "${blue}Applying BBR optimization...${neutral}"
    wget -q -O /tmp/bbr.sh https://raw.githubusercontent.com/PeyxDev/vip/main/fooder/bbr.sh
    chmod +x /tmp/bbr.sh
    /tmp/bbr.sh
    rm -f /tmp/bbr.sh
    
    # Final setup
    echo -e "${blue}Finalizing installation...${neutral}"
    
    # Generate new UUID for Xray configurations
    new_uuid=$(cat /proc/sys/kernel/random/uuid)
    for config in vmess vless trojan shadowsocks; do
        if [ -f "/etc/xray/$config/config.json" ]; then
            sed -i "s/1d1c1d94-6987-4658-a4dc-8821a30fe7e0/$new_uuid/g" "/etc/xray/$config/config.json"
        fi
    done
    
    # Cleanup
    apt-get autoremove -y
    apt-get clean
    
    # Display completion message
    clear
    echo -e "${blue}─────────────────────────────────────────${neutral}"
    echo -e "${green}           INSTALLATION COMPLETE         ${neutral}"
    echo -e "${blue}─────────────────────────────────────────${neutral}"
    echo -e "${green}Domain: $domain${neutral}"
    echo -e "${green}IP: $ip${neutral}"
    echo -e "${green}Location: $city${neutral}"
    echo -e "${green}ISP: $isp${neutral}"
    echo -e "${blue}─────────────────────────────────────────${neutral}"
    echo -e "${yellow}Reboot recommended for all changes to take effect${neutral}"
    echo -e "${blue}─────────────────────────────────────────${neutral}"
    
    read -p "Press enter to reboot or Ctrl+C to cancel..."
    reboot
}

# Run main installation
main_installation "$@"
